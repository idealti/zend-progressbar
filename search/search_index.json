{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"../../README.md","title":"Home"},{"location":"adapters/","text":"Standard Adapters zend-progressbar comes with the following three adapters: Zend\\Progressbar\\Adapter\\Console Zend\\Progressbar\\Adapter\\JsPush Zend\\ProgressBar\\Adapter\\JsPull Console Adapter Zend\\ProgressBar\\Adapter\\Console is a text-based adapter for terminals. It can automatically detect terminal widths, but supports custom widths as well. You can define which elements are displayed with the progressbar as well customize the order of them. You can also define the style of the progressbar itself. Automatic console width recognition shell_exec() is required for this feature to work on *nix based systems. On Windows, there is always a fixed terminal width of 80 characters, so no recognition is required there. You can set the adapter options either via the set*() methods, or provide an array or Traversable instance with options as first parameter to the constructor. The available options are: Option name Type Description outputStream string|resource A different output stream, if you don't want to stream to STDOUT . Can be any other stream like php://stderr or a path to a file. width int|ProgressBar::AUTO Console width to use; ProgressBar::AUTO indicates the adapter should autodetect the width. elements null|array Which elements to include in the display; null to include all, or an array with one of the Console constants, as detailed below. textWidth int Width in characters of the ELEMENT_TEXT element. Default is 20. charset string Charset of the ELEMENT_TEXT element. Default is utf-8. barLeftChar string String to use on the left-hand side of the progressbar indicator. barRightChar string String to use on the right-hand side of the progressbar indicator. barIndicatorChar string String to use within the progressbar indicator to indicate progress; can be empty. To determine which elements to display in the progressbar, use one or more of the following constants: Option name Description ELEMENT_PERCENT The current value in percent. ELEMENT_BAR The visual bar which display the percentage. ELEMENT_ETA The automatic calculated ETA. This element is firstly displayed after five seconds, because in this time, it is not able to calculate accurate results. ELEMENT_TEXT An optional status message about the current process. JsPush Adapter Zend\\ProgressBar\\Adapter\\JsPush is an adapter allowing you to update a browser-based progressbar via Javascript Push. This means that no second connection is required to gather the status about a running process, but that the process itself sends its status directly to the browser. You can set the adapter options either via the set() methods or provide an array or Traversable instance with options as the first parameter to the constructor. The available options are: Option name Type Description updateMethodName string The JavaScript method which should be called on every update. Default value is Zend\\ProgressBar\\Update . finishMethodName null|string The JavaScript method which should be called when sending the finish status. Default value is NULL , which means nothing is done. To use this adapter, first create a progressbar in your browser, either with JavaScript or plain HTML. Then define the update method and optionally a finish method in JavaScript; both should expect a JSON object as the only argument. Then call a webpage with the long-running process in a hidden iframe or object tag. While the process is running, the adapter will call the update method on every update with a JSON object, containing the following parameters: Parameter Description current The current absolute value detailing upload status. max The max absolute value, indicating total upload size. percent The calculated percentage complete of the upload. timeTaken The elapsed time of the upload currently. timeRemaining The expected time until the upload finishes. text The optional status message, if given. Basic example for the client-side This example illustrates a basic setup of HTML, CSS, and JavaScript for the JsPush adapter <div id=\"zend-progressbar-container\"> <div id=\"zend-progressbar-done\"></div> </div> <iframe src=\"long-running-process.php\" id=\"long-running-process\"></iframe> #long-running-process { position: absolute; left: -100px; top: -100px; width: 1px; height: 1px; } #zend-progressbar-container { width: 100px; height: 30px; border: 1px solid #000000; background-color: #ffffff; } #zend-progressbar-done { width: 0; height: 30px; background-color: #000000; } function Zend\\ProgressBar\\Update(data) { document.getElementById('zend-progressbar-done').style.width = data.percent + '%'; } This will create a container with a black border and a block which indicates the current process. You should not hide the iframe or object using display: none; , as some browsers (such as Safari 2) will not load the actual content then. Instead of creating your custom progressbar, you may want to use one of the available JavaScript libraries like Dojo, jQuery etc.: Dojo jQuery MooTools Prototype Interval of updates Do not send too many updates, as every update has a minimum size of 1kb. This is a requirement for the Safari browser to actually render and execute the function call. Internet Explorer has a similar limitation of 256 bytes. JsPull Adapter Zend\\ProgressBar\\Adapter\\JsPull is the opposite of JsPush , as it requires the browser to pull for new updates, instead of pushing updates directly without intervention. In general, you should use this adapter with the persistence option of the Zend\\ProgressBar\\ProgressBar . On notify, the adapter sends a JSON string to the browser, which looks exactly like the JSON string which is sent by the JsPush adapter, with one difference: it contains an additional parameter, finished , which is either false when update() is called or true , when finish() is called. You can set the adapter options either via the set*() methods, or give an array or Traversable instance with options as first parameter to the constructor. The available options are: Option name Type Description exitAfterSend bool Whether or not to exit the current request after the data is sent to the browser; default is true .","title":"Adapters"},{"location":"adapters/#standard-adapters","text":"zend-progressbar comes with the following three adapters: Zend\\Progressbar\\Adapter\\Console Zend\\Progressbar\\Adapter\\JsPush Zend\\ProgressBar\\Adapter\\JsPull","title":"Standard Adapters"},{"location":"adapters/#console-adapter","text":"Zend\\ProgressBar\\Adapter\\Console is a text-based adapter for terminals. It can automatically detect terminal widths, but supports custom widths as well. You can define which elements are displayed with the progressbar as well customize the order of them. You can also define the style of the progressbar itself.","title":"Console Adapter"},{"location":"adapters/#jspush-adapter","text":"Zend\\ProgressBar\\Adapter\\JsPush is an adapter allowing you to update a browser-based progressbar via Javascript Push. This means that no second connection is required to gather the status about a running process, but that the process itself sends its status directly to the browser. You can set the adapter options either via the set() methods or provide an array or Traversable instance with options as the first parameter to the constructor. The available options are: Option name Type Description updateMethodName string The JavaScript method which should be called on every update. Default value is Zend\\ProgressBar\\Update . finishMethodName null|string The JavaScript method which should be called when sending the finish status. Default value is NULL , which means nothing is done. To use this adapter, first create a progressbar in your browser, either with JavaScript or plain HTML. Then define the update method and optionally a finish method in JavaScript; both should expect a JSON object as the only argument. Then call a webpage with the long-running process in a hidden iframe or object tag. While the process is running, the adapter will call the update method on every update with a JSON object, containing the following parameters: Parameter Description current The current absolute value detailing upload status. max The max absolute value, indicating total upload size. percent The calculated percentage complete of the upload. timeTaken The elapsed time of the upload currently. timeRemaining The expected time until the upload finishes. text The optional status message, if given.","title":"JsPush Adapter"},{"location":"adapters/#jspull-adapter","text":"Zend\\ProgressBar\\Adapter\\JsPull is the opposite of JsPush , as it requires the browser to pull for new updates, instead of pushing updates directly without intervention. In general, you should use this adapter with the persistence option of the Zend\\ProgressBar\\ProgressBar . On notify, the adapter sends a JSON string to the browser, which looks exactly like the JSON string which is sent by the JsPush adapter, with one difference: it contains an additional parameter, finished , which is either false when update() is called or true , when finish() is called. You can set the adapter options either via the set*() methods, or give an array or Traversable instance with options as first parameter to the constructor. The available options are: Option name Type Description exitAfterSend bool Whether or not to exit the current request after the data is sent to the browser; default is true .","title":"JsPull Adapter"},{"location":"intro/","text":"Progress Bars zend-progressbar allows creating and updating progress bars in different environments. It consists of a single backend, which outputs the progress through one of the multiple adapters. On every update, it takes an absolute value and optionally a status message, and then calls the adapter with some precalculated values like percentage and estimated time left. Basic Usage To use the component, instantiate Zend\\ProgressBar\\ProgressBar , providing both a a min- and a max-value, and an adapter for providing data output. If you want to process a file, you would do something like: use Zend\\ProgressBar\\ProgressBar; $progressBar = new ProgressBar($adapter, 0, $fileSize); while (! feof($fp)) { // Do something $progressBar->update($currentByteCount); } $progressBar->finish(); In the first step, an instance of Zend\\ProgressBar\\ProgressBar is created, with a specific adapter, a min-value of 0 and a max-value of the total filesize. Then a file is processed and in every loop the progressbar is updated with the current byte count. At the end of the loop, the progressbar status is set to finished. You can also call the update() method of ProgressBar without arguments; doing so recalculates ETA and notifies the adapter. This is useful when there is no data update but you want the progressbar to be updated. Persistent Progress If you want the progressbar to be persistent over multiple requests, you can give the name of a session namespace as fourth argument to the constructor. In that case, the progressbar will not notify the adapter within the constructor, but only when you call update() or finish() . Additionally, the current value, the status text, and the start time for ETA calculation will be fetched in the next request run again.","title":"Intro"},{"location":"intro/#progress-bars","text":"zend-progressbar allows creating and updating progress bars in different environments. It consists of a single backend, which outputs the progress through one of the multiple adapters. On every update, it takes an absolute value and optionally a status message, and then calls the adapter with some precalculated values like percentage and estimated time left.","title":"Progress Bars"},{"location":"intro/#basic-usage","text":"To use the component, instantiate Zend\\ProgressBar\\ProgressBar , providing both a a min- and a max-value, and an adapter for providing data output. If you want to process a file, you would do something like: use Zend\\ProgressBar\\ProgressBar; $progressBar = new ProgressBar($adapter, 0, $fileSize); while (! feof($fp)) { // Do something $progressBar->update($currentByteCount); } $progressBar->finish(); In the first step, an instance of Zend\\ProgressBar\\ProgressBar is created, with a specific adapter, a min-value of 0 and a max-value of the total filesize. Then a file is processed and in every loop the progressbar is updated with the current byte count. At the end of the loop, the progressbar status is set to finished. You can also call the update() method of ProgressBar without arguments; doing so recalculates ETA and notifies the adapter. This is useful when there is no data update but you want the progressbar to be updated.","title":"Basic Usage"},{"location":"intro/#persistent-progress","text":"If you want the progressbar to be persistent over multiple requests, you can give the name of a session namespace as fourth argument to the constructor. In that case, the progressbar will not notify the adapter within the constructor, but only when you call update() or finish() . Additionally, the current value, the status text, and the start time for ETA calculation will be fetched in the next request run again.","title":"Persistent Progress"},{"location":"upload/","text":"File Upload Handlers zend-progressbar provides handlers that can give you the actual state of a file upload in progress. To use this feature you need to choose one of the upload progress handlers (APC, uploadprogress, or session) and ensure that your server setup has the appropriate extension or feature enabled. All of the progress handlers use the same interface. When uploading a file via HTTP POST, you must also include the progress identifier in a hidden input. The File Upload Progress View Helpers provide a convenient way to add the hidden input based on your handler type. Methods of Reporting Progress There are two methods for reporting the current upload progress status: using a ProgressBar Adapter, or using the returned status array manually. Using a ProgressBar Adapter A zend-progressbar adapter can be used to display upload progress to your users. use Zend\\I18n\\Filter\\Alnum as AlnumFilter; use Zend\\ProgressBar\\Adapter; use Zend\\ProgressBar\\Upload; $adapter = new Adapter\\JsPush(); $progress = new Upload\\SessionProgress(); $filter = new AlnumFilter(false, 'en_US'); $id = $filter->filter($_GET['id']); $status = null; while (empty($status['done'])) { $status = $progress->getProgress($id); } Each time the getProgress() method is called, the adapter will be updated. Using the Status Array You can also work manually with getProgress() without using an adapter. getProgress() will return an array with several keys. They will sometimes differ based on the specific upload handler used, but the following keys are always standard: Key name Description total The total file size of the uploaded file(s) in bytes as integer. current The current uploaded file size in bytes as integer. rate The average upload speed in bytes per second as integer. done Returns TRUE when the upload is finished and FALSE otherwise. message A status message. Either the progress as text in the form 10kB / 200kB , or a helpful error message in the case of a problem (such as: no upload in progress, failure while retrieving the data for the progress, or that the upload has been canceled). All other returned keys are provided directly from the specific handler. An example of using the status array manually: use Zend\\ProgressBar\\Upload\\SessionProgress; use Zend\\View\\Model\\JsonModel; // In a Controller... public function sessionProgressAction() { $id = $this->params()->fromQuery('id', null); $progress = new SessionProgress(); return new JsonModel($progress->getProgress($id)); } // Returns JSON //{ // \"total\" : 204800, // \"current\" : 10240, // \"rate\" : 1024, // \"message\" : \"10kB / 200kB\", // \"done\" : false //} Standard Handlers zend-progressbar comes with the following three upload handlers: ApcProgress SessionProgress UploadProgress APC Progress Handler Zend\\ProgressBar\\Upload\\ApcProgress uses the APC extension for tracking upload progress. Extension required The APC extension is required when using this handler. This handler is best used with the FormFileApcProgress view helper, to provide a hidden element with the upload progress identifier. Session Progress Handler The Zend\\ProgressBar\\Upload\\SessionProgress handler uses the PHP Session Progress feature for tracking upload progress. This handler is best used with the FormFileSessionProgress view helper, to provide a hidden element with the upload progress identifier. Upload Progress Handler The Zend\\ProgressBar\\Upload\\UploadProgress handler uses the PECL Uploadprogress extension for tracking upload progress. Extension required The PECL Uploadprogress extension is required in order to use this handler. This handler is best used with the FormFileUploadProgress view helper, to provide a hidden element with the upload progress identifier.","title":"File Upload Handlers"},{"location":"upload/#file-upload-handlers","text":"zend-progressbar provides handlers that can give you the actual state of a file upload in progress. To use this feature you need to choose one of the upload progress handlers (APC, uploadprogress, or session) and ensure that your server setup has the appropriate extension or feature enabled. All of the progress handlers use the same interface. When uploading a file via HTTP POST, you must also include the progress identifier in a hidden input. The File Upload Progress View Helpers provide a convenient way to add the hidden input based on your handler type.","title":"File Upload Handlers"},{"location":"upload/#methods-of-reporting-progress","text":"There are two methods for reporting the current upload progress status: using a ProgressBar Adapter, or using the returned status array manually.","title":"Methods of Reporting Progress"},{"location":"upload/#standard-handlers","text":"zend-progressbar comes with the following three upload handlers: ApcProgress SessionProgress UploadProgress","title":"Standard Handlers"}]}